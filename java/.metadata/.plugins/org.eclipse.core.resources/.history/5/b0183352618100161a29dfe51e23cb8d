import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import javax.swing.JFrame;
import javax.swing.JTable;

public class Main{
	private Table t = new Table();
    private JTable tableau;
	
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		// TODO Auto-generated method stub
		JFrame fenetre = new JFrame();
		setVisible(true);
		setTitle("Application File");
        setSize(800, 400);
        setLocation(100, 100);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		ExecutorService execute = Executors.newFixedThreadPool(4);
		File[] racines = File.listRoots();
		List<File> res = null;
		List<Future<List<File>>> futures = new ArrayList<Future<List<File>>>();
		CompletionService<List<File>> completionService = new ExecutorCompletionService<List<File>>(execute);
		for (File racine : racines)
		{
			futures.add(completionService.submit(new NewCallable(racine.getAbsolutePath())));
		}
		execute.shutdown();
		
		for(int i = 0; i < racines.length; i++)
		{
			res = completionService.take().get();
			if(res != null)
			{
				for(File re : res)
				{
					System.out.println(re.getAbsolutePath());
				}
			}
		}
	}

}
